/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M17
 * Generated at: 2017-03-09 00:51:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Iterator;
import java.util.List;
import java.io.File;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public final class uploadOk_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileUploadException");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

	// 1.이미지 저장될 폴더 path 설정
// 	String dir = "/Users/OKSU/Desktop/IOTstudy149/webProject/web16FileUpload/WebContent/uploadimg";
	String dir = application.getRealPath("uploadimg");
	System.out.println("file...getRealPath>>"+application.getRealPath("uploadimg"));
	
	
	// 2. 최대 크기 
	int max = 10 * 1024 * 1024;

	boolean isMultipart = 
			ServletFileUpload.isMultipartContent(request);

	String comment1 = "";
	String comment2 = "";
	String originalName = "";
	String saveName = "";

	if (isMultipart) {
		File temporaryDir = new File(dir);
		DiskFileItemFactory factory = new DiskFileItemFactory();
		factory.setSizeThreshold(max);
		factory.setRepository(temporaryDir);
		ServletFileUpload upload = new ServletFileUpload(factory);

		List<FileItem> items = null;
		try {
			items = upload.parseRequest(request);
			System.out.println("items.size():" + items.size());
			for(FileItem fi : items){
				String fieldName = fi.getFieldName();
				if(fieldName.equals("comment1")){
					System.out.println(fieldName+":" + fi.getString());
					comment1 = fi.getString();
				}
				if(fieldName.equals("comment2")){
					System.out.println(fieldName+":" + fi.getString());
					comment2 = fi.getString();
				}
				if(fieldName.equals("file")){
					System.out.println(fieldName+":" + fi.getName());
					if(fi.getName().length() !=0){
	 					originalName = fi.getName();
	 					System.out.println(originalName+":" + originalName);
						
	 					long nowTime = System.currentTimeMillis();
	 					String format = originalName.substring(originalName.lastIndexOf('.'));
	 					saveName = nowTime+format;
	 					
	 					try {
							File uploadedFile = new File(dir, saveName);
							fi.write(uploadedFile);
						} catch (Exception e) {
							System.out.println(e);
						}
	 				}
				}
				
				
				
				if(fieldName.equals("tel")){
					System.out.println(fieldName+":" + fi.getString());
					comment2 = fi.getString();
				}
				if(fieldName.equals("multipartFile")){
					System.out.println(fieldName+":" + fi.getName());
					if(fi.getName().length() !=0){
	 					originalName = fi.getName();
	 					System.out.println(originalName+":" + originalName);
						
	 					long nowTime = System.currentTimeMillis();
	 					String format = originalName.substring(originalName.lastIndexOf('.'));
	 					saveName = nowTime+format;
	 					
	 					try {
							File uploadedFile = new File(dir, saveName);
							fi.write(uploadedFile);
						} catch (Exception e) {
							System.out.println(e);
						}
	 				}
				}
				
				
			}
		} catch (FileUploadException fe) {
			System.out.println(fe);
		}
	}

      out.write("\r\n");
      out.write("<!DOCTYPE>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\tcomment1 :");
      out.print(comment1);
      out.write("<br /> \r\n");
      out.write("\tcomment2 :");
      out.print(comment2);
      out.write("<br /> \r\n");
      out.write("\toriginalName :\r\n");
      out.write("\t");
      out.print(originalName);
      out.write("<br /> saveName :\r\n");
      out.write("\t");
      out.print(saveName);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
